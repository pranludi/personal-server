plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.google.protobuf' version '0.9.4'
    id 'io.sentry.jvm.gradle' version '5.1.0'
}

ext {
    set('springGrpcVersion', "0.5.0")
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    implementation project(":domain-entities")
    implementation project(":domain-logic")
    implementation project(":game-data")

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'io.grpc:grpc-services'
    implementation 'org.springframework.grpc:spring-grpc-spring-boot-starter'
    runtimeOnly "org.postgresql:postgresql:42.7.3"

    // query dsl
    implementation "com.querydsl:querydsl-jpa:5.1.0:jakarta"
    annotationProcessor "com.querydsl:querydsl-apt:5.1.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // mapstruct
    implementation "org.mapstruct:mapstruct:1.6.3"
    annotationProcessor "org.mapstruct:mapstruct-processor:1.4.2.Final"
    implementation "no.entur.mapstruct.spi:protobuf-spi-impl:1.46"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.grpc:spring-grpc-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.grpc:spring-grpc-dependencies:${springGrpcVersion}"
    }
}

// QueryDSL Build Options
def querydslDir = layout.buildDirectory.dir("generated/querydsl").get().asFile
sourceSets {
    main.java.srcDirs += [querydslDir]
}

tasks.withType(JavaCompile).configureEach {
    options.getGeneratedSourceOutputDirectory().set(file(querydslDir))
}

tasks.jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc'
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java'
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {
                option 'jakarta_omit'
                option '@generated=omit'
            }
        }
    }
}

sourceSets {
    main {
        proto {
            srcDirs += [
                    '../server-protocol/protobuf',
                    '../service-protocol/protobuf'
            ]
        }
        java {
            srcDirs(
                    'build/generated/source/proto/main/grpc'
            )
        }
    }
}

tasks.named('test') {
    useJUnitPlatform()
}
